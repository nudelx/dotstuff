<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template context="perl" description="Perl Script Starter" enabled="true" name="perl">#!${interpreter}
use strict;
use warnings;

${cursor}</template><template context="perl" description="Perl Package Starter" enabled="true" name="package">package ${packagename};

${cursor}</template><template context="perl" description="for loop" enabled="true" name="for">for(my $$${var}=0; $$${var}&lt;$$${max};$$${var}++){
	${cursor}
}</template><template context="perl" description="foreach loop" enabled="true" name="foreach">foreach my $$${key} (keys $$${some}){${cursor}}</template><template context="perl" description="new package" enabled="true" name="package">package ${filename};

=pod
	Author: Nudelman Alex
			Centerity R&amp;D ${date}
=cut

use warnings;
use strict;


############# PRIVATE ######################



############### GET ########################



############### SET ########################



############### AJAX #######################



############### HTML #######################

1;</template><template context="perl" description="sub Function" enabled="true" name="sub">sub ${name}{
	
	my $$this = shift;
	my $$PARAM = shift || {};
	${cursor}
	
}</template><template context="perl" description="new file " enabled="true" name="#!/usr/bin/perl">#!/usr/bin/perl

=pod
	Author: Nudelman Alex
			Centerity R&amp;D ${date} 
=cut

use warnings;
use strict;





sub main{
	${cursor}
}


main();</template><template context="perl" description="" enabled="true" name="class sub">sub ${name}{
	my $$self = shift;
	
	${cursor}
}</template><template context="perl" description="self object" enabled="true" name="self">$$self = shift;

${cursor}</template><template context="perl" description="html" enabled="true" name="html">&lt;!DOCTYPE&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
        &lt;title&gt;&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;

        // put your code here

    &lt;/body&gt;
&lt;/html&gt;</template><template context="perl" description="html header function" enabled="true" name="header">sub Header{
	
	my $$this = shift;
	
print '&lt;!DOCTYPE html&gt;
		
		&lt;html&gt;
    		&lt;head&gt;
        		&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
       			&lt;link href="${css_path}" rel="stylesheet" type="text/css" /&gt;
				&lt;script type="text/javascript" src="${js_path}"&gt;&lt;/script&gt;
        
        		&lt;title&gt;&lt;/title&gt;
    		&lt;/head&gt;
    
    &lt;body&gt;'; 
	
}</template><template context="perl" description="sub html footer" enabled="true" name="footer">sub Footer{
	
	my $$this = shift;
	
print ' 	&lt;/body&gt;
		&lt;/html&gt;';
	
}</template><template context="perl" description="type/html" enabled="true" name="type">print "Content-type: text/html\n\n";</template><template context="perl" description="get data tmpl" enabled="true" name="GetData">sub GetData{
	
	my $$this = shift;
	
	my $$sqlquery = shift;
	my $$fetch_by = shift;
	
	return unless $$sqlquery;
	$$fetch_by = 'id' unless $$fetch_by;
	
	
	$$this-&gt;{STH} = $$this-&gt;{DB}-&gt;prepare($$sqlquery) || die($$!);
	$$this-&gt;{STH}-&gt;execute()|| die($$!);
	
	unless($$this-&gt;{STH}-&gt;rows)
	{
		my @cols = @{$$this-&gt;{STH}-&gt;{NAME_lc}}; # or NAME if needed
		my %empty =  map {$$_ =&gt; ""} @cols ;
		return \%empty;
	}
	
	my $$temp = $$this-&gt;{STH}-&gt;fetchall_hashref($$fetch_by);
	$$this-&gt;{STH}-&gt;finish();
	return $$temp;

	
}</template><template context="perl" description="PrintPostedData" enabled="true" name="Posted">sub PrintPosted{
	
	my $$data  = shift;
	
	print '&lt;br&gt;######################################&lt;br&gt;&lt;br&gt;';
	foreach my $$key (keys %$$data){
		
		print $$key.' ==&gt; '.$$data-&gt;{$$key}.'&lt;br&gt;';
		
	}
	print '&lt;br&gt;######################################&lt;br&gt;&lt;br&gt;';
}</template><template context="perl" description="destructor" enabled="true" name="destructor">sub DESTROY{
	
	my $$this = shift;
	$$this-&gt;{DB}-&gt;disconnect();
	
}</template><template context="perl" description="constructor" enabled="true" name="constructor">sub new{
	my $$class = shift;
	my $$USER_CONF = shift || {};
	
	my $$this = {};
	
	map {$$this-&gt;{$$_} = ($$USER_CONF-&gt;{$$_})?($$USER_CONF-&gt;{$$_}):($$this-&gt;{$$_});} keys %$$this;
	bless $$this;
	return $$this;

	
}</template><template context="perl" description="" enabled="true" name="dunmp">sub DumpData{
	
	use Data::Dumper;
	
	my $$this = shift;
	my $$data =shift;
	print '&lt;h1&gt;---------&lt;/h1&gt;';
	print '&lt;pre&gt;';
	print Dumper($$data);
	print '&lt;/pre&gt;';
	
}</template><template context="perl" description="" enabled="true" name="print h">print '&lt;h1&gt;'.${cursor}.'&lt;/h1&gt;';</template><template context="perl" description="using tempalte functiuon" enabled="true" name="GetDataFromDB">$$this-&gt;GetData(${db_table_name},${args_array},${fetch_by},${conditions});</template><template context="perl" description="insert" enabled="true" name="InsertToDb">sub InsertDBData{
 
 	my $$this = shift;
	my $$sqlquery = shift;
	my $$insertid = 0;
	
	return unless $$sqlquery;
	
	$$this-&gt;{STH} = $$this-&gt;{DB}-&gt;prepare($$sqlquery);
	$$this-&gt;{STH}-&gt;execute();	
	$$insertid = $$this-&gt;{STH}-&gt;{mysql_insertid};
	$$this-&gt;{STH}-&gt;finish();
	return $$insertid; 
 
}</template><template context="perl" description="get data tmpl" enabled="true" name="GetDBData">sub GetDBData{
	
	my $$this = shift;
	
	my $$sqlquery = shift;
	my $$fetch_by = shift;
	
	return unless $$sqlquery;
	$$fetch_by = 'id' unless $$fetch_by;
	
	
	$$this-&gt;{STH} = $$this-&gt;{DB}-&gt;prepare($$sqlquery) || die($$!);
	$$this-&gt;{STH}-&gt;execute()|| die($$!);
	
	unless($$this-&gt;{STH}-&gt;rows)
	{
		my @cols = @{$$this-&gt;{STH}-&gt;{NAME_lc}}; # or NAME if needed
		my %empty =  map {$$_ =&gt; ""} @cols ;
		return \%empty;
	}
	
	my $$temp = $$this-&gt;{STH}-&gt;fetchall_hashref($$fetch_by);
	$$this-&gt;{STH}-&gt;finish();
	return $$temp;

	
}</template><template context="perl" description="ClassPRoperty" enabled="true" name="Property">sub ${name}{
	$$this = shift;
	if(my $$val = shift @_)
	{$$this-&gt;{${val}}= $$val}
	else{ return $$this-&gt;{${val}};}
}</template><template context="perl" description="" enabled="true" name="DumpObject">sub DumpObject{
	$$obj = shift;
	use Data::Dumper;
	{
    	no strict 'refs';
   	    print "Instance METHOD IS  " . Dumper( \%{ref ($$obj)."::" }) ;
    }
	
}</template><template context="perl" description="coment" enabled="true" name="coment">###
# ${cursor}
###</template><template context="perl" description="get data tmpl" enabled="true" name="GetDBDaataCutom">sub GetData{
	
	my $$this = shift;
	
	my $$sqlquery = shift;
	my $$fetch_by = shift;
	
	return unless $$sqlquery;
	$$fetch_by = 'id' unless $$fetch_by;
	
	
	$$this-&gt;{STH} = $$this-&gt;{DB}-&gt;prepare($$sqlquery) || die($$!);
	$$this-&gt;{STH}-&gt;execute()|| die($$!);
	
	unless($$this-&gt;{STH}-&gt;rows)
	{
		my @cols = @{$$this-&gt;{STH}-&gt;{NAME_lc}}; # or NAME if needed
		my %empty =  map {$$_ =&gt; ""} @cols ;
		return \%empty;
	}
	

	while(my $$temp = $$this-&gt;{STH}-&gt;fetchrow_hashref())
 	{
 		
 	}
	
	$$this-&gt;{STH}-&gt;finish();
	return $$temp;

	
}</template><template context="perl" description="" enabled="true" name="header-adv">sub Header{

	my $$this = shift;
	my $$USER_CONF = shift || {};
	
	my $$DEFAULTS  = {
	 
	 JS    =&gt; [],
	 CSS   =&gt; [],
	 TITLE =&gt; ''
	 
	};
	
	map {$$DEFAULTS-&gt;{uc($$_)} = ($$USER_CONF-&gt;{uc($$_)} || $$USER_CONF-&gt;{lc($$_)})?($$USER_CONF-&gt;{uc($$_)} || $$USER_CONF-&gt;{lc($$_)}):($$DEFAULTS-&gt;{uc($$_)});} keys %$$DEFAULTS;
	my $$skip_type = shift || 0; ####  optional only in session create ;  
	
		
	unless(ref($$DEFAULTS-&gt;{JS}) eq 'ARRAY')
	{$$DEFAULTS-&gt;{JS} = [$$DEFAULTS-&gt;{'JS'}] if ($$DEFAULTS-&gt;{JS});}
	
	unless(ref($$DEFAULTS-&gt;{CSS}) eq 'ARRAY')
	{$$DEFAULTS-&gt;{CSS} = [$$DEFAULTS-&gt;{CSS}] if ($$DEFAULTS-&gt;{CSS});}
	
	
	
	
print "Content-type: text/html\n\n" unless ($$skip_type);
print '&lt;!DOCTYPE html&gt;
		
		&lt;html&gt;
    		&lt;head&gt;
    		    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge, chrome=1" /&gt; 
        		&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
        		&lt;!-- &lt;link rel="shortcut icon"  href="/assets/img/favicon.ico"&gt; --&gt;';
        		
        		foreach my $$key (@{$$DEFAULTS-&gt;{CSS}}){
        			print '&lt;link href="'.$$key.'" rel="stylesheet" type="text/css" /&gt;';
    
        		}
        		
        		foreach my $$key (@{$$DEFAULTS-&gt;{JS}}){
        			print '&lt;script type="text/javascript" src="'.$$key.'"&gt;&lt;/script&gt;';
        		}
        	        
        		print '&lt;title&gt;'.$$DEFAULTS-&gt;{TITLE}.'&lt;/title&gt;
    		&lt;/head&gt;
    
    &lt;body&gt;'; 
}</template><template context="perl" description="" enabled="true" name="print pre">print '&lt;pre&gt;'.${cursor}.'&lt;/pre&gt;';</template><template context="perl" description="SetGetProperties" enabled="true" name="SetGet">sub SetGet${name}{
	
	my $$this  = shift;
	my $$value = undef;
	
	if($$value = shift){
		
		$$this-&gt;{${attribute}} = $$value;
		
	}else{ 
		 return $$this-&gt;{${attribute}};
	}
}</template><template context="perl" description="DBConnector" enabled="true" name="DBConnector">my $$connector = sub {

        my $$pass = shift;
        my $$user = shift;

        $$user = '${username}' unless $$user;
        $$pass = '${passwd}' unless $$pass;

        my $$db = DBI-&gt;connect( "DBI:mysql:", $$user, $$pass ) or die "can't connect ==&gt; $$!";
        return $$db;
        
        


};</template><template context="perl" description="FirstUC" enabled="true" name="FirstUC">sub FirstUC{
	
	my $$this = shift;
	my $$str = shift;
	
	my @arr = split(/_/,$$str);
	return join(" ", map(ucfirst(), @arr));
	
}</template><template context="perl" description="plugin_template" enabled="true" name="plugin_template">#!/usr/bin/perl

=pod
------------------------------------------------------------
                                                          
                  Author: Alex nudelman                   
                  Group: Centerity R&amp;D ${date}       
                                                          
                  All Rights Reserved                     
                  Centerity Systems LTD                   
                  support@centerity.com                   
                                                          
                                                          
------------------------------------------------------------
=cut



use strict;
use warnings;
use Data::Dumper;
use Getopt::Long qw(:config no_ignore_case bundling);

my $$debug = 0;



sub PrintDebug{
	
	return unless $$debug;
	my $$debug = shift;
	print "\nDEBUG::: $$debug\n";
	
}

sub PrintUsage{
	
	print  "\n\n
Usage Example:

 [-t]     -- table name\n
 [-p]     -- db passwd\n
 [-u]     -- db user\n
 [-h]     -- db host [** note: host must be provided with port &lt;host:port&gt;] \n
 
 note: If result of the sql query will return more then [1] row, only first row will be executed. \n\n
 
 EXAMPLE 1 [using where logic]:
 	
 	&lt;plugin_name&gt; -t M_SYSTEM_OVERVIEW -p ****** -u SYSTEM -h iltlvl328.tlv.sap.corp:30013 --where \"SECTION='System' and NAME='Version' \" -f STATUS --OK OK --WARN WARNING \n\n\n
 	 	
 	
 	";
	exit(0);
	
}


sub OutPut{
	
	my $$str = shift || "none";
	my $$code = shift || 0;
	
	##### no exit only output
	if($$code == 0 ){ print $$str." OK.";} 
	if($$code == 1 ){ print $$str." WARNING.";}
	if($$code == 2 ){ print $$str." CRITICAL.";}
	if($$code == 3 ){ print $$str." UNKNOWN.";}
	
	##### with exit 
	if($$code == 10 ){ print $$str." OK.";       exit(0);} 
	if($$code == 11 ){ print $$str." WARNING.";  exit(1);}
	if($$code == 12 ){ print $$str." CRITICAL."; exit(2);}
	if($$code == 13 ){ print $$str." UNKNOWN.";  exit(3);}
	
	 
	
}

sub DumpData{

	my $$data = shift;
	print "\n==================\n";
	print Dumper($$data);

}


sub CreateOutPut{
	
	my $$data = shift;
	my $$output = undef;
	
	foreach my $$key(keys %$$data){
		$$output.= $$key."=[".$$data-&gt;{$$key}."], ";
	}
	
	return $$output;
	

}

sub CheckOptions{
	
	my $$opt = shift;
	
	
	### we will check each param separately
	unless($$opt-&gt;{TABLE}){OutPut("Please Provide the DB Table",12);}
	unless($$opt-&gt;{PASSWD}){OutPut("Please Provide the DB Passwd",12);}
	unless($$opt-&gt;{USER}){OutPut("Please Provide the DB User",12);}
	unless($$opt-&gt;{HOST}){OutPut("Please Provide the DB HOST with Port &lt;host:port&gt;",12);}
	unless($$opt-&gt;{OUTPUT_VALUE}){OutPut("Please Provide db column to work with ",12);}
	 
}


sub main{
	
	my %opt;
	
#	if(scalar @ARGV &gt; 0){
#		
#		
#		my $$res = Getopt::Long::GetOptions(
#			
#			"t=s"        =&gt; \$$opt{TABLE},
#			"p=s"        =&gt; \$$opt{PASSWD},
#			"u=s"        =&gt; \$$opt{USER},
#			"h=s"        =&gt; \$$opt{HOST},
#			"f=s"        =&gt; \$$opt{OUTPUT_VALUE},
#			"d=i"        =&gt; \$$opt{DEBUG},
#			"--OK=s"     =&gt; \$$opt{OK},
#			"--WARN=s"   =&gt; \$$opt{WARNING},
#			"--norows=i" =&gt; \$$opt{NO_ROWS_EXIT},
#			"where=s"    =&gt; \$$opt{WHERE} )|| PrintUsage();
#		
#		$$debug = $$opt{DEBUG};
#		PrintDebug("OPT:".Dumper(\%opt));
#		CheckOptions(\%opt);
#		
#				
#	}else{PrintUsage();}
	
	
	
	print "main\n";


	
		
	


}


main();</template><template context="perl" description="" enabled="true" name="cgi-control">#!/usr/bin/perl

=pod
	Author: Nudelman Alex
			Centerity R&amp;D Jun 26, 2013 
=cut

use warnings;
use strict;
use CGI;
use CGI::Carp qw(fatalsToBrowser);

use lib '/usr/local/centerity/CENTERITY_STD_LIB/LIB';
use lib '/usr/local/centerity/Monitor/sbin/lib/';
##use lib '/usr/local/centerity/Monitor/sbin/ToolKit/lib/';


sub PrintPosted{
	
	my $$data  = shift;
	print "Content-type: text/html\n\n";
	
	print '&lt;br&gt;######################################&lt;br&gt;&lt;br&gt;';
	foreach my $$key (keys %$$data){
		
		print $$key.' ==&gt; '.$$data-&gt;{$$key}.'&lt;br&gt;';
		
	}
	print '&lt;br&gt;######################################&lt;br&gt;&lt;br&gt;';
}


my $$debug = 1;



sub main{
 
 
 my $$cgi = new CGI();
 
 my %vars = $$cgi-&gt;Vars();
 PrintPosted(\%vars) if ($$debug);
 
 my $$action = $$cgi-&gt;param('action');
 

 

	
}


main();</template><template context="perl" description="" enabled="true" name="warn-return">sub{ warn "no options provided. LINE: ".__LINE__." at ".__PACKAGE__."\n"; return}-&gt;();</template><template context="perl" description="" enabled="true" name="print p">print '&lt;p&gt;'.${cursor}.'&lt;/p&gt;';</template><template context="perl" description="" enabled="true" name="print debug">print '&lt;pre&gt;'.__DEBUG__.'&lt;/pre&gt;';</template><template context="perl" description="centerity database manager" enabled="true" name="cdbm">use Generics::Model::CenterityDBManager;</template><template context="perl" description="" enabled="true" name="script js html entry ">&lt;script type="text/javascript" src="${name}"&gt;&lt;/script&gt;</template><template context="perl" description="json" enabled="true" name="type">print "Content-type: application/json\n\n";</template><template context="perl" description="path to stl " enabled="true" name="stl">use lib '/usr/local/centerity/CENTERITY_STD_LIB/LIB';</template></templates>